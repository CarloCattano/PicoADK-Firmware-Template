{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index Introduction The PicoADK is a RP2040 based Audio Development Kit, which allows you to build your own digital oscillators, synthesizers, noise boxes and experiment around. It has all the base features of the Raspberry Pico, plus a high quality Audio Output, 8 Analog Inputs for connecting potentiometers, control voltage from eurorack systems or even additional input signals. Even though it is very small, it is capable of synthesizing and outputting a very high quality sound output. Thanks to the Vult DSP language you can even create digital resonant filters, oscillators and even complete synthesizers! Technical Specs RP2040 Dual Core Cortex M0+ running at up to 400MHz USB Type-C connector 2MB Flash for Firmware and Data Very low noise LDO regulators (separate LDO for digital circuits and separate for analog circuits), no switching regulators Partially pin-compatible with RP2040 (besides a few pins internally used or rearranged), extra 4 pins on each side Audio DAC PCM5100A, up to 32-bit output Very high audio signal quality and very low noise Dedicated Boot and Reset Buttons 8 channel 12-bit ADC with up to 1MS/s, with selectable 3.3V range (on-board low-noise power supply) or range up to 5V via external VREF Low-Pass filter on each ADC input (fMax=48 KHz) at low-impedance (100 Ohm). With 5V VREF suitable for CV (no overvoltage protection, unipolar) Symbols marking special pin functions on the pin headers 4 LEDs on shared GPIO2-5 for debugging ESD Protection on USB SWD Debug Port For pinout and technical details go here and if you want to get started with the PicoADK head over to Getting Started . Media You can find some sound teasers at Soundcloud .","title":"Index"},{"location":"#index","text":"","title":"Index"},{"location":"#introduction","text":"The PicoADK is a RP2040 based Audio Development Kit, which allows you to build your own digital oscillators, synthesizers, noise boxes and experiment around. It has all the base features of the Raspberry Pico, plus a high quality Audio Output, 8 Analog Inputs for connecting potentiometers, control voltage from eurorack systems or even additional input signals. Even though it is very small, it is capable of synthesizing and outputting a very high quality sound output. Thanks to the Vult DSP language you can even create digital resonant filters, oscillators and even complete synthesizers!","title":"Introduction"},{"location":"#technical-specs","text":"RP2040 Dual Core Cortex M0+ running at up to 400MHz USB Type-C connector 2MB Flash for Firmware and Data Very low noise LDO regulators (separate LDO for digital circuits and separate for analog circuits), no switching regulators Partially pin-compatible with RP2040 (besides a few pins internally used or rearranged), extra 4 pins on each side Audio DAC PCM5100A, up to 32-bit output Very high audio signal quality and very low noise Dedicated Boot and Reset Buttons 8 channel 12-bit ADC with up to 1MS/s, with selectable 3.3V range (on-board low-noise power supply) or range up to 5V via external VREF Low-Pass filter on each ADC input (fMax=48 KHz) at low-impedance (100 Ohm). With 5V VREF suitable for CV (no overvoltage protection, unipolar) Symbols marking special pin functions on the pin headers 4 LEDs on shared GPIO2-5 for debugging ESD Protection on USB SWD Debug Port For pinout and technical details go here and if you want to get started with the PicoADK head over to Getting Started .","title":"Technical Specs"},{"location":"#media","text":"You can find some sound teasers at Soundcloud .","title":"Media"},{"location":"getting_started/","text":"Getting started This quick start guide will show you how to get started with your PicoADK board. The guide should work on Windows, MacOS and Linux. Prerequisites Install Docker - for beginners we suggest using Docker Desktop Repository structure C / C++ code is located in the src folder and contains all the low-level funtionality for the firmware incl. USB MIDI handling and dealing with the Audio DAC. Includes for the C / C++ code are located in the include folder. The Vult DSP code is located in the vultsrc folder. The includes for Vult are located in lib/vult/examples . These provide some oscillator, filter and envelope implementation along others. Compiling Using the script Just execute ./build-firmware-docker.sh in the project folder. Manually git clone --recursive https://github.com/DatanoiseTV/PicoADK-Firmware-Template.git cd PicoADK-Firmware-Template Enter the following command in your project directory: docker run --rm -u $(id -u):$(id -g) -v $PWD:/project -w /project datanoisetv/picoadk-dev:latest build-firmware.sh Uploading After your compile process was successful, you will see a .UF2 file in the build subdirectory. Press and hold the BOOT button on your PicoADK Hardware and press the RESET button while holding BOOT . Then release BOOT * and a virtual drive will appear. Now you can simply drag and drop the *.UF2 file to the virtual disk drive and the PicoADK will reboot and start running your firmware.","title":"Getting started"},{"location":"getting_started/#getting-started","text":"This quick start guide will show you how to get started with your PicoADK board. The guide should work on Windows, MacOS and Linux.","title":"Getting started"},{"location":"getting_started/#prerequisites","text":"Install Docker - for beginners we suggest using Docker Desktop","title":"Prerequisites"},{"location":"getting_started/#repository-structure","text":"C / C++ code is located in the src folder and contains all the low-level funtionality for the firmware incl. USB MIDI handling and dealing with the Audio DAC. Includes for the C / C++ code are located in the include folder. The Vult DSP code is located in the vultsrc folder. The includes for Vult are located in lib/vult/examples . These provide some oscillator, filter and envelope implementation along others.","title":"Repository structure"},{"location":"getting_started/#compiling","text":"","title":"Compiling"},{"location":"getting_started/#using-the-script","text":"Just execute ./build-firmware-docker.sh in the project folder.","title":"Using the script"},{"location":"getting_started/#manually","text":"git clone --recursive https://github.com/DatanoiseTV/PicoADK-Firmware-Template.git cd PicoADK-Firmware-Template Enter the following command in your project directory: docker run --rm -u $(id -u):$(id -g) -v $PWD:/project -w /project datanoisetv/picoadk-dev:latest build-firmware.sh","title":"Manually"},{"location":"getting_started/#uploading","text":"After your compile process was successful, you will see a .UF2 file in the build subdirectory. Press and hold the BOOT button on your PicoADK Hardware and press the RESET button while holding BOOT . Then release BOOT * and a virtual drive will appear. Now you can simply drag and drop the *.UF2 file to the virtual disk drive and the PicoADK will reboot and start running your firmware.","title":"Uploading"},{"location":"hardware_reference/","text":"Hardware Reference Pinout Interactive pinout at https://datanoise.net/picoadk/ Internal Signals Some signals are routed to internal peripherals as following: GPIO Function Shared w/ Header? GPIO2 Debug LED 1 yes GPIO3 Debug LED 2 yes GPIO4 Debug LED 3 yes GPIO5 Debug LED 4 yes GPIO10 ADC128 SPI1 SCK yes GPIO11 ADC128 SPI1 MOSI yes GPIO12 ADC128 SPI1 MISO yes GPIO13 ADC128 SPI1 CSn yes GPIO15 Big Debug LED (Ws2812 on v1.1a) no GPIO16 PCM5100A I2S DAT no GPIO17 PCM5100A I2S BCLK no GPIO18 PCM5100A I2S LRCLK no GPIO23 PCM5100A DEMP no GPIO24 VBUS Detect Pin no GPIO25 PCM5102 XSMT no The SPI ADC shares the GPIO10 to GPIO13, which are also present on the pin headers. Please be aware of that. Make sure your software controls the XSMT and DEMP pins. The XSMT needs to be controled by the software to mute/unmute the audio output. With the DEMP pin you can control the Deemphasis for 44100 Hz. 5V ADC FAQ By default, the ADC range is approximately 0-3.3v provided by a low-noise internal 3.3V voltage source. If you want to use 0-5V input range, you need to cut the trace on the jumper on the bottom of the PCB and bridge the VEXT position with the middle of the jumper. MAKE SURE THAT YOU CHECK FOR NON-CONTINUITY WITH A MULTIMETER between the 3.3V reference side and the middle of the jumper to make sure you've cut the bridge properly. The recommended way of cutting the trace is using a sharp blade such as an exacto knife. Use of a dremel or similar is not recommended, as it could damage the inner layers of the board Potentiometer FAQ The on board LDO is only able to supply around 100mA of current on the 3.3V output. Therefore, if you are using potentiometers where the CW side is attached to GND and the CCW side is attached to 3.3V, a big current draw might destroy your boards LDO regulator. Please consider using an external 3.3V LDO if using the ADC in 3.3V mode or modify the solder jumper on the bottom of the PCB to allow the ADC to work with up to 5V range and potentiometers to be powered by 5V. Please see the remark above at Changes required for 5V ADC range (default is 3.3v) . The most common external LDO for 3.3V operation is the AMS1117-3.3. The input of the external LDO should be attached to the VSYS pin or VBUS pin, depening on your requirements and should be decoupled with a capacitor on both input and output. It is also recommended to connect each ADC pin with a big resistor (eg. 1M) to GND to avoid noise / floating inputs. The inputs of the ADC all have a passive low-pass filter with a cutoff frequency of 48kHz at 100 Ohms load. Update as of \"A\" revision : The LDO can supply 300mA now. Block Diagram","title":"Hardware Reference"},{"location":"hardware_reference/#hardware-reference","text":"","title":"Hardware Reference"},{"location":"hardware_reference/#pinout","text":"Interactive pinout at https://datanoise.net/picoadk/","title":"Pinout"},{"location":"hardware_reference/#internal-signals","text":"Some signals are routed to internal peripherals as following: GPIO Function Shared w/ Header? GPIO2 Debug LED 1 yes GPIO3 Debug LED 2 yes GPIO4 Debug LED 3 yes GPIO5 Debug LED 4 yes GPIO10 ADC128 SPI1 SCK yes GPIO11 ADC128 SPI1 MOSI yes GPIO12 ADC128 SPI1 MISO yes GPIO13 ADC128 SPI1 CSn yes GPIO15 Big Debug LED (Ws2812 on v1.1a) no GPIO16 PCM5100A I2S DAT no GPIO17 PCM5100A I2S BCLK no GPIO18 PCM5100A I2S LRCLK no GPIO23 PCM5100A DEMP no GPIO24 VBUS Detect Pin no GPIO25 PCM5102 XSMT no The SPI ADC shares the GPIO10 to GPIO13, which are also present on the pin headers. Please be aware of that. Make sure your software controls the XSMT and DEMP pins. The XSMT needs to be controled by the software to mute/unmute the audio output. With the DEMP pin you can control the Deemphasis for 44100 Hz.","title":"Internal Signals"},{"location":"hardware_reference/#5v-adc-faq","text":"By default, the ADC range is approximately 0-3.3v provided by a low-noise internal 3.3V voltage source. If you want to use 0-5V input range, you need to cut the trace on the jumper on the bottom of the PCB and bridge the VEXT position with the middle of the jumper. MAKE SURE THAT YOU CHECK FOR NON-CONTINUITY WITH A MULTIMETER between the 3.3V reference side and the middle of the jumper to make sure you've cut the bridge properly. The recommended way of cutting the trace is using a sharp blade such as an exacto knife. Use of a dremel or similar is not recommended, as it could damage the inner layers of the board","title":"5V ADC FAQ"},{"location":"hardware_reference/#potentiometer-faq","text":"The on board LDO is only able to supply around 100mA of current on the 3.3V output. Therefore, if you are using potentiometers where the CW side is attached to GND and the CCW side is attached to 3.3V, a big current draw might destroy your boards LDO regulator. Please consider using an external 3.3V LDO if using the ADC in 3.3V mode or modify the solder jumper on the bottom of the PCB to allow the ADC to work with up to 5V range and potentiometers to be powered by 5V. Please see the remark above at Changes required for 5V ADC range (default is 3.3v) . The most common external LDO for 3.3V operation is the AMS1117-3.3. The input of the external LDO should be attached to the VSYS pin or VBUS pin, depening on your requirements and should be decoupled with a capacitor on both input and output. It is also recommended to connect each ADC pin with a big resistor (eg. 1M) to GND to avoid noise / floating inputs. The inputs of the ADC all have a passive low-pass filter with a cutoff frequency of 48kHz at 100 Ohms load. Update as of \"A\" revision : The LDO can supply 300mA now.","title":"Potentiometer FAQ"},{"location":"hardware_reference/#block-diagram","text":"","title":"Block Diagram"}]}